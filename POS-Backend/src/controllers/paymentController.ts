import { Request, Response } from "express";
import mongoose from "mongoose";
import Receipt, { IReceipt } from "../models/Receipt";
import Stock from "../models/Stock";
import StockTransaction from "../models/StockTransaction";
import Payment from "../models/Payment";
import { verifyToken } from "../utils/auth";
// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (‡∏ó‡∏±‡πâ‡∏á‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
export const createPayment = async (req: Request, res: Response): Promise<void> => {
    try {
        const token = req.header("Authorization")?.split(" ")[1];
        if (!token) {
            res.status(401).json({ success: false, message: "Unauthorized" });
            return;
        }

        const decoded = verifyToken(token);
        if (typeof decoded === "string" || !("userId" in decoded)) {
            res.status(401).json({ success: false, message: "Invalid token" });
            return;
        }

        const {
            saleId,
            employeeName,
            paymentMethod,
            amountReceived,
            amount,
            items,
            isReturn = false, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            reason,
        } = req.body;

        if (!saleId || !employeeName || !paymentMethod || !amount || !items) {
            res.status(400).json({ success: false, message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
            return;
        }

        // ‚úÖ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (‡∏Ç‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏ô)
        const paymentType = isReturn ? "REFUND" : "SALE";

        // ‚úÖ 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Payment
        const newPayment = new Payment({
            saleId,
            employeeName,
            paymentMethod,
            type: paymentType,
            amountReceived,
            amount: isReturn ? -Math.abs(amount) : Math.abs(amount), // üíµ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏∑‡∏ô ‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
            status: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            notes: isReturn ? `‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (${reason || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•"})` : undefined,
        });

        await newPayment.save();

        // ‚úÖ 2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° / ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô
        const totalPrice = items.reduce((total: number, item: any) => total + item.subtotal, 0);
        let changeAmount = 0;
        if (!isReturn && paymentMethod === "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î" && amountReceived) {
            changeAmount = amountReceived - totalPrice;
        }

        // ‚úÖ 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
        const newReceipt = new Receipt({
            paymentId: newPayment._id,
            employeeName,
            items,
            totalPrice: isReturn ? -Math.abs(totalPrice) : Math.abs(totalPrice),
            paymentMethod,
            amountPaid: amountReceived,
            changeAmount,
            timestamp: new Date(),
            profit: isReturn
                ? -items.reduce((sum: number, i: any) => sum + (i.profit || 0), 0)
                : items.reduce((sum: number, i: any) => sum + (i.profit || 0), 0),
            ...(isReturn && { isReturn: true, returnReason: reason }),
        });

        await newReceipt.save();

        // ‚úÖ 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Payment ‡πÉ‡∏´‡πâ‡∏ä‡∏µ‡πâ‡∏Å‡∏•‡∏±‡∏ö Receipt
        newPayment.receiptId = newReceipt._id;
        await newPayment.save();

        // ‚úÖ 5. ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö
        res.status(201).json({
            success: true,
            message: isReturn
                ? "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
                : "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            payment: newPayment,
            receipt: newReceipt,
        });
    } catch (error) {
        console.error("‚ùå Error in createPayment:", error);
        res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", error });
    }
};

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const getAllPayments = async (_: Request, res: Response): Promise<void> => {
    try {
        const payments = await Payment.find().populate("receiptId").sort({ createdAt: -1 });

        if (!payments.length) {
            res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" });
            return;
        }

        res.status(200).json({ success: true, data: payments });
    } catch (error) {
        console.error("Error retrieving all payments:", error);
        res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", error });
    }
};

export const processRefund = async (req: Request, res: Response): Promise<void> => {
    const session = await mongoose.startSession();
    session.startTransaction();

    try {
        const token = req.header("Authorization")?.split(" ")[1];
        if (!token) {
            res.status(401).json({ success: false, message: "Unauthorized" });
            return;
        }

        const decoded = verifyToken(token);
        if (typeof decoded === "string" || !("userId" in decoded)) {
            res.status(401).json({ success: false, message: "Invalid token" });
            return;
        }

        const { saleId, reason } = req.body;
        if (!saleId) {
            res.status(400).json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à" });
            return;
        }

        let payment;

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤ saleId ‡πÄ‡∏õ‡πá‡∏ô ObjectId ‡∏Ç‡∏≠‡∏á Receipt ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const isObjectId = mongoose.Types.ObjectId.isValid(saleId);
        if (isObjectId) {
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô ObjectId ‚Üí ‡∏´‡∏≤‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏∂‡∏á paymentId ‡∏à‡∏≤‡∏Å‡πÉ‡∏ô‡∏ô‡∏±‡πâ‡∏ô
            const receipt = await Receipt.findById(saleId).session(session);
            if (!receipt) {
                res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ô‡∏µ‡πâ" });
                return;
            }
            payment = await Payment.findById(receipt.paymentId).session(session);
        } else {
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏Ç‡∏≤‡∏¢ ‚Üí ‡∏´‡∏≤ Payment ‡∏à‡∏≤‡∏Å saleId ‡∏õ‡∏Å‡∏ï‡∏¥
            payment = await Payment.findOne({ saleId }).session(session);
        }

        if (!payment) {
            res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ" });
            return;
        }

        // üßæ ‡∏´‡∏≤‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
        const originalReceipt = await Receipt.findOne({
            paymentId: payment._id,
            isReturn: false,
        })
            .populate("paymentId")
            .session(session);

        if (!originalReceipt) {
            res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ô‡∏µ‡πâ" });
            return;
        }

        // üí∞ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ñ‡∏∑‡∏ô
        const refundAmount = originalReceipt.totalPrice;

        // üì¶ ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
        for (const item of originalReceipt.items) {
            const stock = await Stock.findOne({ barcode: item.barcode }).session(session);
            if (!stock) continue;

            stock.totalQuantity += item.quantity;
            await stock.save({ session });
            await stock.updateStatus();

            await StockTransaction.create(
                [
                    {
                        stockId: stock._id,
                        productId: stock.productId,
                        userId: decoded.userId,
                        type: "RETURN",
                        quantity: item.quantity,
                        costPrice: stock.costPrice,
                        salePrice: item.price,
                        source: "CUSTOMER",
                        notes: `‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à (${reason || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•"})`,
                        referenceId: originalReceipt._id,
                    },
                ],
                { session }
            );
        }

        // üí≥ ‡∏™‡∏£‡πâ‡∏≤‡∏á Payment ‡πÉ‡∏´‡∏°‡πà (REFUND)
        const [refundPayment] = await Payment.create(
            [
                {
                    saleId: payment.saleId,
                    employeeName: originalReceipt.employeeName,
                    paymentMethod: "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î",
                    type: "REFUND",
                    amountReceived: refundAmount,
                    amount: -Math.abs(refundAmount),
                    status: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                    notes: reason || "‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à",
                },
            ],
            { session }
        );

        // üßæ ‡∏™‡∏£‡πâ‡∏≤‡∏á Receipt ‡πÉ‡∏´‡∏°‡πà (‡πÉ‡∏ö‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
        const [returnReceipt] = await Receipt.create(
            [
                {
                    paymentId: refundPayment._id,
                    originalReceiptId: originalReceipt._id,
                    employeeName: originalReceipt.employeeName,
                    items: originalReceipt.items.map((item: any) => ({
                        barcode: item.barcode,
                        name: item.name,
                        price: item.price,
                        quantity: item.quantity,
                        subtotal: -Math.abs(item.subtotal),
                        profit: -(item.profit || 0),
                    })),
                    totalPrice: -Math.abs(originalReceipt.totalPrice),
                    paymentMethod: "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î",
                    amountPaid: refundAmount,
                    changeAmount: 0,
                    isReturn: true,
                    returnReason: reason,
                    timestamp: new Date(),
                    profit: -(originalReceipt.profit || 0),
                },
            ],
            { session }
        );

        // üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Payment ‚Üî Receipt
        refundPayment.receiptId = returnReceipt._id as any;
        await refundPayment.save({ session });

        await session.commitTransaction();
        session.endSession();

        res.status(200).json({
            success: true,
            message: "‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà)",
            data: {
                originalReceipt,
                returnReceipt,
                refundPayment,
            },
        });
    } catch (error) {
        await session.abortTransaction();
        session.endSession();
        console.error("‚ùå processRefund Error:", error);
        res.status(500).json({ success: false, message: "Server error" });
    }
};
