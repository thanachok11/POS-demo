// controllers/paymentController.ts
import { Request, Response } from "express";
import mongoose from "mongoose";
import Receipt from "../models/Receipt";
import Stock from "../models/Stock";
import StockTransaction from "../models/StockTransaction";
import Payment from "../models/Payment";
import User from "../models/User";
import Employee from "../models/Employee";
import { verifyToken } from "../utils/auth";

/* ======================= Helper: resolve ownerId ======================= */
const getOwnerId = async (userId: string): Promise<string> => {
    let user: any = await User.findById(userId);
    if (!user) user = await Employee.findById(userId);
    if (!user) throw new Error("User not found");

    if (user.role === "admin") return user._id.toString();
    if (user.role === "employee") {
        if (!user.adminId) throw new Error("Employee does not have admin assigned");
        return user.adminId.toString();
    }
    throw new Error("Invalid user role");
};

/* ============================================================
   üßæ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (‡∏ó‡∏±‡πâ‡∏á‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
============================================================ */
export const createPayment = async (req: Request, res: Response): Promise<void> => {
    const session = await mongoose.startSession();
    session.startTransaction();

    try {
        const token = req.header("Authorization")?.split(" ")[1];
        if (!token) {
            res.status(401).json({ success: false, message: "Unauthorized" });
            return;
        }

        const decoded = verifyToken(token);
        if (typeof decoded === "string" || !("userId" in decoded)) {
            res.status(401).json({ success: false, message: "Invalid token" });
            return;
        }

        const ownerId = await getOwnerId(decoded.userId);

        // ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å body
        const {
            saleId,
            employeeName,
            paymentMethod,
            amountReceived,
            items,
            discount = 0, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
        } = req.body;

        if (!saleId || !employeeName || !paymentMethod || !amountReceived || !items?.length) {
            res.status(400).json({ success: false, message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
            return;
        }

        // üí∞ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£ (‡∏≠‡∏¥‡∏á‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á owner ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
        const calculatedItems = await Promise.all(
            items.map(async (item: any) => {
                const stock = await Stock.findOne({ barcode: item.barcode, userId: ownerId });
                const costPrice = stock?.costPrice || 0;
                const profit = (Number(item.price) - Number(costPrice)) * Number(item.quantity || 0);
                return { ...item, profit };
            })
        );

        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
        const subtotal = calculatedItems.reduce((sum, i) => sum + Number(i.subtotal || 0), 0);

        // ‚úÖ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
        const totalPrice = Math.max(subtotal - Number(discount || 0), 0);

        // ‚úÖ ‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°
        const totalProfit = calculatedItems.reduce((sum, i) => sum + Number(i.profit || 0), 0);

        // üíµ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î
        const changeAmount =
            paymentMethod === "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î" && amountReceived ? Number(amountReceived) - totalPrice : 0;

        // ‚úÖ 1) Payment
        const [newPayment] = await Payment.create(
            [
                {
                    userId: ownerId,          // <-- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á owner
                    saleId,
                    employeeName,
                    paymentMethod,
                    type: "SALE",
                    amountReceived,
                    amount: totalPrice,       // ‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
                    discount,
                    profit: totalProfit,
                    status: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                },
            ],
            { session }
        );

        // ‚úÖ 2) Receipt
        const [newReceipt] = await Receipt.create(
            [
                {
                    userId: ownerId,          // <-- ‡∏Ç‡∏≠‡∏á owner
                    paymentId: newPayment._id,
                    employeeName,
                    items: calculatedItems,
                    totalPrice,
                    discount,
                    paymentMethod,
                    amountPaid: amountReceived,
                    changeAmount,
                    profit: totalProfit,
                    timestamp: new Date(),
                },
            ],
            { session }
        );

        // ‚úÖ 3) ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Payment ‚Üí Receipt
        await Payment.updateOne(
            { _id: newPayment._id },
            { $set: { receiptId: newReceipt._id } },
            { session }
        );

        await session.commitTransaction();
        session.endSession();

        res.status(201).json({
            success: true,
            message: "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            payment: newPayment,
            receipt: newReceipt,
        });
    } catch (error) {
        await session.abortTransaction();
        session.endSession();
        console.error("‚ùå Error in createPayment:", error);
        res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", error });
    }
};

/* ============================================================
   üí≥ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   - ‡∏≠‡∏¥‡∏á ownerId ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏£‡πâ‡∏≤‡∏ô (‡πÅ‡∏°‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô employee)
============================================================ */
export const getAllPayments = async (req: Request, res: Response): Promise<void> => {
    try {
        const token = req.header("Authorization")?.split(" ")[1];
        if (!token) {
            res.status(401).json({ success: false, message: "Unauthorized" });
            return;
        }

        const decoded = verifyToken(token);
        if (typeof decoded === "string" || !("userId" in decoded)) {
            res.status(401).json({ success: false, message: "Invalid token" });
            return;
        }

        const ownerId = await getOwnerId(decoded.userId);

        const payments = await Payment.find({ userId: ownerId })
            .populate("receiptId")
            .sort({ createdAt: -1 });

        // ‚úÖ ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö 200 + [] ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ 404 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î error ‡∏ù‡∏±‡πà‡∏á UI
        res.status(200).json({ success: true, data: payments || [] });
    } catch (error) {
        console.error("Error retrieving payments:", error);
        res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", error });
    }
};

/* ============================================================
   üîÅ ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
   - Scope ‡∏î‡πâ‡∏ß‡∏¢ ownerId ‡∏ó‡∏±‡πâ‡∏á‡∏ï‡∏≠‡∏ô‡∏≠‡πà‡∏≤‡∏ô/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
============================================================ */
export const processRefund = async (req: Request, res: Response): Promise<void> => {
    const session = await mongoose.startSession();
    session.startTransaction();

    try {
        const token = req.header("Authorization")?.split(" ")[1];
        if (!token) {
            res.status(401).json({ success: false, message: "Unauthorized" });
            return;
        }

        const decoded = verifyToken(token);
        if (typeof decoded === "string" || !("userId" in decoded)) {
            res.status(401).json({ success: false, message: "Invalid token" });
            return;
        }
        const ownerId = await getOwnerId(decoded.userId);

        const { saleId, reason, paymentMethod, items } = req.body;
        if (!saleId) {
            res.status(400).json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à" });
            return;
        }
        if (!paymentMethod) {
            res.status(400).json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô" });
            return;
        }

        // ‚úÖ ‡∏î‡∏∂‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á owner)
        const isObjectId = mongoose.Types.ObjectId.isValid(saleId);
        const receipt = isObjectId
            ? await Receipt.findOne({ _id: saleId, userId: ownerId }).session(session)
            : await Receipt.findOne({ saleId, userId: ownerId }).session(session);

        if (!receipt) {
            res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ô‡∏µ‡πâ" });
            return;
        }

        // üö´ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏ã‡πâ‡∏≥
        if (receipt.isReturn || receipt.returnReceiptId) {
            res.status(400).json({
                success: false,
                message: "‚ö†Ô∏è ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ",
            });
            return;
        }

        const payment = await Payment.findOne({ _id: receipt.paymentId, userId: ownerId }).session(session);
        if (!payment) {
            res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á" });
            return;
        }

        // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤‡∏Ñ‡∏∑‡∏ô
        const refundItems = items && items.length > 0 ? items : receipt.items;

        // üí∞ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ñ‡∏∑‡∏ô/‡∏Å‡∏≥‡πÑ‡∏£‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        const refundAmount = refundItems.reduce((sum: number, i: any) => sum + Math.abs(Number(i.subtotal || 0)), 0);
        const refundProfit = refundItems.reduce((sum: number, i: any) => sum + Math.abs(Number(i.profit || 0)), 0);

        // üì¶ ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å (‡∏Ç‡∏≠‡∏á owner ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
        for (const item of refundItems) {
            const stock = await Stock.findOne({ barcode: item.barcode, userId: ownerId }).session(session);
            if (stock) {
                stock.totalQuantity = Number(stock.totalQuantity || 0) + Number(item.quantity || 0);
                await stock.save({ session });
                await stock.updateStatus();

                await StockTransaction.create(
                    [
                        {
                            stockId: stock._id,
                            productId: stock.productId,
                            userId: ownerId,            // ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö owner
                            type: "RETURN",
                            quantity: Number(item.quantity || 0),
                            costPrice: stock.costPrice,
                            salePrice: Number(item.price || 0),
                            source: "CUSTOMER",
                            notes: `‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${reason || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•"}`,
                            referenceId: receipt._id,
                        },
                    ],
                    { session }
                );
            }
        }

        // üí≥ Payment: REFUND (‡∏Ç‡∏≠‡∏á owner)
        const [refundPayment] = await Payment.create(
            [
                {
                    userId: ownerId,
                    saleId: payment.saleId,
                    employeeName: receipt.employeeName,
                    paymentMethod,
                    type: "REFUND",
                    amountReceived: refundAmount,
                    amount: -refundAmount,
                    profit: -refundProfit,
                    status: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                    notes: reason || "‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ö‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
                },
            ],
            { session }
        );

        // üßæ Receipt ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà (‡∏Ç‡∏≠‡∏á owner)
        const [returnReceipt] = await Receipt.create(
            [
                {
                    userId: ownerId,
                    paymentId: refundPayment._id,
                    originalReceiptId: receipt._id,
                    employeeName: receipt.employeeName,
                    items: refundItems.map((i: any) => ({
                        ...i,
                        subtotal: -Math.abs(Number(i.subtotal || 0)),
                        profit: -Number(i.profit || 0),
                    })),
                    totalPrice: -refundAmount,
                    paymentMethod,
                    amountPaid: refundAmount,
                    changeAmount: 0,
                    isReturn: true,
                    returnReason: reason,
                    timestamp: new Date(),
                    profit: -refundProfit,
                },
            ],
            { session }
        );

        // üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Payment ‚Üî Receipt
        refundPayment.receiptId = returnReceipt._id as any;
        await refundPayment.save({ session });

        // üîó Mark ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÉ‡∏ö‡∏Ñ‡∏∑‡∏ô (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á flag isReturn ‡πÄ‡∏õ‡πá‡∏ô true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
        await Receipt.updateOne(
            { _id: receipt._id, userId: ownerId },
            { $set: { returnReceiptId: returnReceipt._id } },
            { session }
        );

        await session.commitTransaction();
        session.endSession();

        res.status(200).json({
            success: true,
            message: "‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ö‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ö)",
            data: {
                originalReceipt: receipt,
                returnReceipt,
                refundPayment,
            },
        });
    } catch (error) {
        await session.abortTransaction();
        session.endSession();
        console.error("‚ùå processRefund Error:", error);
        res.status(500).json({ success: false, message: "Server error", error });
    }
};
