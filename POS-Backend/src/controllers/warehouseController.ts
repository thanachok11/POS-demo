import { Request, Response } from "express";
import Warehouse from "../models/Warehouse";
import Stock from "../models/Stock";

import jwt from "jsonwebtoken";

interface JwtPayload {
    userId: string;
}

const verifyToken = (token: string): JwtPayload => {
    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
        return decoded as JwtPayload;
    } catch (error) {
        throw new Error("Invalid token");
    }
};

// üèóÔ∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏±‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏° gen code (WH01, WH02)
export const createWarehouse = async (req: Request, res: Response): Promise<void> => {
    try {
        const authHeader = req.headers.authorization;
        if (!authHeader || !authHeader.startsWith("Bearer ")) {
            throw new Error("Token not provided");
        }

        const token = authHeader.split(" ")[1];
        const decoded = verifyToken(token);

        const { name, location, description } = req.body;
        if (!name) throw new Error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤");

        // üî¢ ‡∏´‡∏≤‡∏Ñ‡∏•‡∏±‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö code
        const lastWarehouse = await Warehouse.findOne({ userId: decoded.userId })
            .sort({ createdAt: -1 })
            .lean();

        let nextNumber = 1;
        if (lastWarehouse && lastWarehouse.code) {
            const match = lastWarehouse.code.match(/\d+$/);
            if (match) nextNumber = parseInt(match[0], 10) + 1;
        }

        const code = `WH${nextNumber.toString().padStart(2, "0")}`;

        // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏±‡∏á‡πÉ‡∏´‡∏°‡πà
        const warehouse = new Warehouse({
            name,
            code,
            location,
            description,
            userId: decoded.userId,
        });

        await warehouse.save();
        res.status(201).json({
            success: true,
            message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ",
            data: warehouse,
        });
    } catch (error: any) {
        res.status(401).json({ error: error.message || "Unauthorized" });
    }
};

// üîç ‡∏î‡∏∂‡∏á‡∏Ñ‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á user
export const getWarehouses = async (req: Request, res: Response): Promise<void> => {
    try {
        const authHeader = req.headers.authorization;
        if (!authHeader || !authHeader.startsWith("Bearer ")) {
            throw new Error("Token not provided");
        }

        const token = authHeader.split(" ")[1];
        const decoded = verifyToken(token);

        const warehouses = await Warehouse.find({ userId: decoded.userId }).sort({ createdAt: -1 });
        res.json(warehouses);
    } catch (error: any) {
        res.status(401).json({ error: error.message || "Unauthorized" });
    }
};


// ‡∏î‡∏∂‡∏á‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° id ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏±‡πâ‡∏ô
export const getWarehouseById = async (req: Request, res: Response): Promise<void> => {
    try {
        const authHeader = req.headers.authorization;
        if (!authHeader || !authHeader.startsWith("Bearer ")) {
            throw new Error("Token not provided");
        }
        const token = authHeader.split(" ")[1];
        const decoded = verifyToken(token);

        const warehouse = await Warehouse.findOne({ _id: req.params.id, userId: decoded.userId });
        if (!warehouse) {
            res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
            return;
        }
        res.json(warehouse);
    } catch (error: any) {
        res.status(401).json({ error: error.message || "Unauthorized" });
    }
};

// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏±‡πâ‡∏ô
export const updateWarehouse = async (req: Request, res: Response): Promise<void> => {
    try {
        const authHeader = req.headers.authorization;
        if (!authHeader || !authHeader.startsWith("Bearer ")) {
            throw new Error("Token not provided");
        }
        const token = authHeader.split(" ")[1];
        const decoded = verifyToken(token);

        const { name, location, description } = req.body;
        if (req.body.code) {
            {
                res.status(400).json({ error: "‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏•‡∏±‡∏á (code)" });
                return;
            }
        }
        const warehouse = await Warehouse.findOneAndUpdate(
            { _id: req.params.id, userId: decoded.userId },
            { name, location, description },
            { new: true }
        );

        if (!warehouse) {
            res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
            return;
        }
        res.json(warehouse);
    } catch (error: any) {
        res.status(401).json({ error: error.message || "Unauthorized" });
    }
};

// ‡∏•‡∏ö‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏±‡πâ‡∏ô
export const deleteWarehouse = async (req: Request, res: Response): Promise<void> => {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        if (!token) throw new Error("Token not provided");

        const decoded = verifyToken(token);

        const warehouse = await Warehouse.findOne({
            _id: req.params.id,
            userId: decoded.userId,
        });
        if (!warehouse) {
            res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
            return;
        }

        // ‚ùó ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ stock ‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏´‡∏°
        const inUse = await Stock.exists({ location: warehouse._id });
        if (inUse) {
            res.status(400).json({
                error: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ñ‡∏•‡∏±‡∏á "${warehouse.name}" ‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà`,
            });
            return;
        }

        await warehouse.deleteOne();
        res.json({ message: "‡∏•‡∏ö‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‚úÖ" });
    } catch (error: any) {
        res.status(401).json({ error: error.message || "Unauthorized" });
    }
};