import mongoose, { Schema, Document } from "mongoose";

/* ==========================
   üì¶ Interface: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô PO
========================== */
interface IPurchaseOrderItem {
    stockId: mongoose.Schema.Types.ObjectId;
    productId: mongoose.Schema.Types.ObjectId;
    productName: string;
    barcode?: string;
    quantity: number;
    costPrice: number;
    total: number;
    batchNumber?: string;
    expiryDate?: Date;
}

/* ==========================
   üìÑ Interface: Purchase Order ‡∏´‡∏•‡∏±‡∏Å
========================== */
export interface IPurchaseOrder extends Document {
    purchaseOrderNumber: string;
    supplierId: mongoose.Schema.Types.ObjectId;
    supplierCompany: string;
    supplierCode?: string;
    warehouseCode?: string;
    location?: mongoose.Schema.Types.ObjectId;
    orderDate: Date;
    status:
    | "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
    | "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß"
    | "QC ‡∏ú‡πà‡∏≤‡∏ô"
    | "QC ‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô"
    | "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô QC - ‡∏£‡∏≠‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
    | "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô QC - ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß"
    | "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏Ñ‡∏•‡∏±‡∏á"
    | "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å";
    qcStatus: "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö" | "‡∏ú‡πà‡∏≤‡∏ô" | "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô" | "‡∏ï‡∏£‡∏ß‡∏à‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô" | "‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô";
    poType: "NORMAL" | "RETURN" | "TRANSFER";
    items: IPurchaseOrderItem[];
    totalAmount: number;
    invoiceNumber?: string;
    note?: string;
    pendingTransferTo?: mongoose.Schema.Types.ObjectId; // ‚úÖ ‡∏Ñ‡∏•‡∏±‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á (‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô)
    stockLots: mongoose.Schema.Types.ObjectId[];
    receivedAt?: Date;
    qcCheckedAt?: Date;
    returnedAt?: Date;
    createdBy: mongoose.Schema.Types.ObjectId;
    updatedBy?: mongoose.Schema.Types.ObjectId;
    createdAt: Date;
    updatedAt: Date;
}

/* ==========================
   üßæ Schema: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô PO
========================== */
const PurchaseOrderItemSchema = new Schema<IPurchaseOrderItem>(
    {
        stockId: { type: Schema.Types.ObjectId, ref: "Stock", required: false },
        productId: { type: Schema.Types.ObjectId, ref: "Product", required: true },
        productName: { type: String, required: true },
        barcode: { type: String },
        quantity: { type: Number, required: true },
        costPrice: { type: Number, required: true },
        total: { type: Number, required: false },
        batchNumber: { type: String },
        expiryDate: { type: Date },
    },
    { _id: false }
);

/* ==========================
   üìÑ Schema: Purchase Order ‡∏´‡∏•‡∏±‡∏Å
========================== */
const PurchaseOrderSchema = new Schema<IPurchaseOrder>(
    {
        purchaseOrderNumber: { type: String, unique: true, required: true },
        supplierId: { type: Schema.Types.ObjectId, ref: "Supplier", required: true },
        supplierCompany: { type: String, required: true },
        location: { type: Schema.Types.ObjectId, ref: "Warehouse" }, 
        orderDate: { type: Date, default: Date.now },
        status: {
            type: String,
            enum: [
                "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
                "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß",
                "QC ‡∏ú‡πà‡∏≤‡∏ô",
                "QC ‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô",
                "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô QC - ‡∏£‡∏≠‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
                "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô QC - ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß",
                "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏Ñ‡∏•‡∏±‡∏á", 
                "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
            ],
            default: "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
        },
        qcStatus: {
            type: String,
            enum: ["‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", "‡∏ï‡∏£‡∏ß‡∏à‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô", "‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô", "‡∏ú‡πà‡∏≤‡∏ô", "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô"],
            default: "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
        },
        poType: {
            type: String,
            enum: ["NORMAL", "RETURN", "TRANSFER"],
            default: "NORMAL",
        },
        items: { type: [PurchaseOrderItemSchema], required: true },
        totalAmount: { type: Number, required: true },
        invoiceNumber: { type: String },
        note: { type: String },
        pendingTransferTo: { type: Schema.Types.ObjectId, ref: "Warehouse" },

        stockLots: [{ type: Schema.Types.ObjectId, ref: "StockLot" }],
        receivedAt: { type: Date },
        qcCheckedAt: { type: Date },
        returnedAt: { type: Date },
        createdBy: { type: Schema.Types.ObjectId, ref: "User", required: true },
        updatedBy: { type: Schema.Types.ObjectId, ref: "User" },
    },
    { timestamps: true }
);

/* ==========================
   ‚öôÔ∏è Indexes
========================== */
PurchaseOrderSchema.index({ supplierId: 1 });
PurchaseOrderSchema.index({ location: 1 });
PurchaseOrderSchema.index({ status: 1 });
PurchaseOrderSchema.index({ createdAt: -1 });
PurchaseOrderSchema.index({ pendingTransferTo: 1 });

/* ==========================
   üöÄ Export
========================== */
const PurchaseOrder =
    mongoose.models.PurchaseOrder ||
    mongoose.model<IPurchaseOrder>("PurchaseOrder", PurchaseOrderSchema);

export default PurchaseOrder;
