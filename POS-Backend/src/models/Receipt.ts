import mongoose, { Schema, Document, Model } from "mongoose";

// üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Receipt
export interface IReceipt extends Document {
    paymentId: mongoose.Types.ObjectId;
    employeeName: string;
    items: {
        barcode: string;
        name: string;
        price: number;
        quantity: number;
        subtotal: number;
    }[];
    totalPrice: number;
    paymentMethod: "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î" | "QR Code" | "‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï" | "‡πÇ‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£";
    amountPaid?: number;    // üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡πà‡∏≤‡∏¢ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î)
    changeAmount?: number;  // üíµ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô
    timestamp: Date;
}

// üîπ Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
const ReceiptSchema: Schema<IReceipt> = new Schema({
    paymentId: { type: Schema.Types.ObjectId, ref: "Payment", required: true },
    employeeName: { type: String, required: true },
    items: [
        {
            barcode: { type: String, required: true },
            name: { type: String, required: true },
            price: { type: Number, required: true },
            quantity: { type: Number, required: true },
            subtotal: { type: Number, required: true },
        },
    ],
    totalPrice: { type: Number, required: true },
    paymentMethod: {
        type: String,
        enum: ["‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î", "QR Code", "‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï", "‡πÇ‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£"],
        required: true,
    },
    amountPaid: { type: Number },
    changeAmount: { type: Number, default: 0 },
    timestamp: { type: Date, default: Date.now },
});

// üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á Model
const Receipt: Model<IReceipt> = mongoose.model<IReceipt>("Receipt", ReceiptSchema);

export default Receipt;
