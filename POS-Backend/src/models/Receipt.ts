import mongoose, { Schema, Document } from "mongoose";

export interface IReceiptItem {
    [x: string]: unknown;
    barcode: string;
    name: string;
    price: number;
    quantity: number;
    subtotal: number;
    profit?: number;
}

export interface IReceipt extends Document {
    paymentId?: mongoose.Types.ObjectId | null;
    originalReceiptId?: mongoose.Types.ObjectId | null; // ‚úÖ ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á (‡∏Å‡∏£‡∏ì‡∏µ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
    employeeName: string;
    items: IReceiptItem[];
    totalPrice: number;
    paymentMethod: "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î" | "‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô" | "‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï" | "QR Code";
    amountPaid: number;
    changeAmount: number;
    isReturn?: boolean; // ‚úÖ ‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    returnReason?: string; // ‚úÖ ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    profit?: number;
    timestamp: Date;
    createdAt?: Date;
    updatedAt?: Date;
}

const ReceiptItemSchema = new Schema<IReceiptItem>(
    {
        barcode: { type: String, required: true },
        name: { type: String, required: true },
        price: { type: Number, required: true },
        quantity: { type: Number, required: true },
        subtotal: { type: Number, required: true },
        profit: { type: Number, default: 0 },
    },
    { _id: false } // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á _id ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô items
);

const ReceiptSchema = new Schema<IReceipt>(
    {
        paymentId: { type: Schema.Types.ObjectId, ref: "Payment", default: null },
        originalReceiptId: { type: Schema.Types.ObjectId, ref: "Receipt", default: null }, // üß© ‡∏≠‡πâ‡∏≤‡∏á‡∏ñ‡∏∂‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á
        employeeName: { type: String, required: true },

        items: {
            type: [ReceiptItemSchema],
            required: true,
            validate: {
                validator: (items: IReceiptItem[]) => items.length > 0,
                message: "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
            },
        },

        totalPrice: { type: Number, required: true },
        paymentMethod: {
            type: String,
            enum: ["‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î", "‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", "‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï", "QR Code"],
            required: true,
        },
        amountPaid: { type: Number, required: true },
        changeAmount: { type: Number, required: true },

        // üîÅ ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        isReturn: { type: Boolean, default: false },
        returnReason: { type: String, default: null },

        // üí∞ ‡∏Å‡∏≥‡πÑ‡∏£‡∏ï‡πà‡∏≠‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
        profit: { type: Number, default: 0 },

        // ‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
        timestamp: { type: Date, default: Date.now },
    },
    { timestamps: true }
);

// ‚úÖ Index ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
ReceiptSchema.index({ timestamp: -1 });
ReceiptSchema.index({ employeeName: 1 });
ReceiptSchema.index({ isReturn: 1 });
ReceiptSchema.index({ originalReceiptId: 1 });

const Receipt = mongoose.model<IReceipt>("Receipt", ReceiptSchema);
export default Receipt;
