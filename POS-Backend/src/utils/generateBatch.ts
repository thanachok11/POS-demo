import StockLot ,{ IStockLot } from "../models/StockLot";
import Product from "../models/Product";


/**
 * üßÆ Generate Batch Number (Auto Increment per product/supplier/warehouse)
 * ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: LOT-YYYYMMDD-WHxx-SPxx-xxxxx-####
 */
export const generateBatchNumber = async (
    warehouseCode: string,
    supplierCode: string,
    productId: string
): Promise<string> => {
    // üß± ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    const product = await Product.findById(productId)
        .select("barcode")
        .lean<{ _id: string; barcode: string }>();

    if (!product) throw new Error(`Product not found: ${productId}`);

    const productPart = product.barcode?.slice(-5) || productId.slice(-5);
    const datePart = new Date().toISOString().slice(0, 10).replace(/-/g, "");

    // ‚úÖ prefix ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ warehouse/supplier ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    const prefix = `LOT-\\d{8}-${warehouseCode}-${supplierCode}-${productPart}-`;

    // ‚úÖ ‡∏´‡∏≤ batch ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ (warehouse + supplier + barcode ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
    const lastLot = await StockLot.findOne({
        productId,
        batchNumber: { $regex: prefix }, // regex ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô (‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡πÑ‡∏î‡πâ)
    })
        .sort({ createdAt: -1 })
        .lean<IStockLot | null>(); // ‚úÖ ‡∏£‡∏∞‡∏ö‡∏∏ type ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î


    let nextNumber = 1;

    if (lastLot?.batchNumber) {
        const match = lastLot.batchNumber.match(/-(\d{4})$/);
        if (match) nextNumber = parseInt(match[1], 10) + 1;
    }

    const newBatch = `LOT-${datePart}-${warehouseCode}-${supplierCode}-${productPart}-${String(
        nextNumber
    ).padStart(4, "0")}`;

    return newBatch;
};
