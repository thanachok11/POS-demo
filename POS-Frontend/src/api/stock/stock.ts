import axios from "axios";

// Base URL ‡∏Ç‡∏≠‡∏á API
const API_BASE_URL = import.meta.env.VITE_API_URL;

interface SellProductParams {
  barcode: string;
  quantity: number;
  salePrice: number;
  userId: string;
  orderId: string;
}


// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• stock ‡∏ï‡∏≤‡∏° token
export const getStockData = async (token: string) => {
  try {
    const response = await axios.get(`${API_BASE_URL}/stocks`, {
      headers: { Authorization: `Bearer ${token}` },
    });
    return response.data.data; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å
  } catch (error: any) {
    console.error("Error fetching stock data:", error);
    throw new Error(error.response?.data?.message || "Error fetching stock data");
  }
};

export const getStockByBarcode = async (barcode: string) => {
  try {
    const response = await axios.get(`${API_BASE_URL}/stocks/${barcode}`);

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å API ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    if (response.status === 200) {
      return response.data.stockQuantity; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å
    } else {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å");
      return; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 0 ‡∏ñ‡πâ‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    }
  } catch (error) {
    console.error('Error fetching stock by barcode:', error);
    throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ'); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ
  }
};

// ‡∏î‡∏∂‡∏á Stock ‡∏ï‡∏≤‡∏° Product ID
export const getStockByProductId = async (productId: string) => {
  try {
    const response = await axios.get(`${API_BASE_URL}?productId=${productId}`);
    return response.data;
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á Stock ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:", error);
    throw error;
  }
};


export const createOrder = async (orderData: any) => {
  try {
    const response = await axios.post(`${API_BASE_URL}/orders`, orderData);
    return response.data;
  } catch (error: any) {
    console.error("‚ùå createOrder error:", error);
    return { success: false, message: error.response?.data?.message || "API error" };
  }
};

// api/stock/stock.ts
export const updateStock = async (
  barcode: string,
  updateData: {
    quantity?: number;
    supplier?: string;
    location?: string;
    threshold?: number;
    status?: string;
  }
) => {
  const token = localStorage.getItem("token");
  if (!token) throw new Error("No token found");

  console.log("üì¶ [updateStock] Barcode:", barcode);
  console.log("üì¶ [updateStock] Data:", updateData);

  try {
    const response = await axios.patch(`${API_BASE_URL}/stocks/${barcode}`, updateData, {
      headers: { Authorization: `Bearer ${token}` },
    });

    return response.data;
  } catch (error: any) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å:", error.response?.data || error.message);
    throw new Error(error.response?.data?.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å");
  }
};


export const addStock = async (data: {
  productId: string;
  quantity: number;
  supplier?: string;
  location?: string;
  threshold?: number;
}, token: string) => {
  try {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° headers ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á token ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
    const config = {
      headers: {
        'Authorization': `Bearer ${token}`,  // ‡∏™‡πà‡∏á token ‡∏ú‡πà‡∏≤‡∏ô Authorization header
        'Content-Type': 'application/json',  // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ JSON
      },
    };

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
    const response = await axios.post(`${API_BASE_URL}/orders/create`, data, config);
    return response.data;
  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° Stock:', error);
    throw error;
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const getProducts = async () => {
  const token = localStorage.getItem('token'); // ‡∏î‡∏∂‡∏á token ‡∏à‡∏≤‡∏Å localStorage

  if (!token) {
    throw new Error('No token found');
  }

  try {
    // ‡∏™‡πà‡∏á token ‡πÑ‡∏õ‡πÉ‡∏ô Authorization header
    const response = await axios.get(`${API_BASE_URL}/products/get`, {
      headers: {
        'Authorization': `Bearer ${token}` // ‡πÉ‡∏™‡πà token ‡πÉ‡∏ô header
      }
    });

    return response.data; // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
  } catch (error) {
    console.error("Error fetching products:", error);
    throw error; // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
  }
};

// Delete Stock by Barcode
export const deleteStock = async (barcode: string) => {
  const token = localStorage.getItem("token");
  if (!token) throw new Error("No token found");

  try {
    const response = await axios.delete(`${API_BASE_URL}/stocks/${barcode}`, {
      headers: { Authorization: `Bearer ${token}` },
    });

    return response.data;
  } catch (error: any) {
    console.error("‚ùå Error deleting stock:", error.response?.data || error.message);
    throw new Error(error.response?.data?.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å");
  }
};