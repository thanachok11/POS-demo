import React, { useEffect, useState } from "react";
import "../../styles/stock/StockTransaction.css";
import { getStockTransactions } from "../../api/stock/transactionApi";

interface StockTransaction {
    _id: string;
    productId: {
        _id: string;
        name: string;
        barcode?: string;
    };
    stockId: {
        _id: string;
        location?: string;
    };
    type: "SALE" | "RESTOCK" | "RETURN" | "ADJUSTMENT";
    quantity: number;
    userId: {
        _id: string;
        username: string;
    };
    costPrice?: number;
    salePrice?: number;
    notes?: string;
    createdAt: string;
}

const StockTransaction: React.FC = () => {
    const [transactions, setTransactions] = useState<StockTransaction[]>([]);
    const [filtered, setFiltered] = useState<StockTransaction[]>([]);
    const [search, setSearch] = useState("");
    const [startDate, setStartDate] = useState("");
    const [endDate, setEndDate] = useState("");
    const [loading, setLoading] = useState(true);

    // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏ï‡πá‡∏≠‡∏Å
    useEffect(() => {
        const fetchData = async () => {
            try {
                const token = localStorage.getItem("token");
                if (!token) return;

                const res = await getStockTransactions(token);
                if (res.success) {
                    setTransactions(res.data);
                    setFiltered(res.data);
                }
            } catch (err) {
                console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î Stock Transaction ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", err);
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, []);

    // ‚úÖ ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    useEffect(() => {
        let data = [...transactions];

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        if (search.trim() !== "") {
            data = data.filter((t) =>
                t.productId?.name.toLowerCase().includes(search.toLowerCase())
            );
        }

        // ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        if (startDate) {
            data = data.filter((t) => new Date(t.createdAt) >= new Date(startDate));
        }
        if (endDate) {
            data = data.filter((t) => new Date(t.createdAt) <= new Date(endDate));
        }

        setFiltered(data);
    }, [search, startDate, endDate, transactions]);

    // ‚úÖ Map type ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    const getTypeLabel = (type: string) => {
        switch (type) {
            case "SALE":
                return "‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤";
            case "RESTOCK":
                return "‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤";
            case "RETURN":
                return "‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤";
            case "ADJUSTMENT":
                return "‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡∏ï‡πá‡∏≠‡∏Å";
            default:
                return type;
        }
    };

    return (
        <div className="stock-transaction-page">
            <h1>üì¶ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏™‡∏ï‡πá‡∏≠‡∏Å</h1>

            {/* üîé ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå */}
            <div className="filter-container">
                <input
                    type="text"
                    placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤..."
                    value={search}
                    onChange={(e) => setSearch(e.target.value)}
                />
                <input
                    type="date"
                    value={startDate}
                    onChange={(e) => setStartDate(e.target.value)}
                />
                <input
                    type="date"
                    value={endDate}
                    onChange={(e) => setEndDate(e.target.value)}
                />
            </div>

            {loading ? (
                <p className="loading">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
            ) : filtered.length === 0 ? (
                <p className="no-data">‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏ï‡πá‡∏≠‡∏Å</p>
            ) : (
                <table className="transaction-table">
                    <thead>
                        <tr>
                            <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                            <th>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                            <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
                            <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
                            <th>‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</th>
                            <th>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∏‡∏ô</th>
                            <th>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢</th>
                            <th>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</th>
                        </tr>
                    </thead>
                    <tbody>
                        {filtered.map((t) => (
                            <tr key={t._id}>
                                <td>{new Date(t.createdAt).toLocaleString("th-TH")}</td>
                                <td>{t.productId?.name}</td>
                                <td>{getTypeLabel(t.type)}</td>
                                <td>{t.quantity}</td>
                                <td>{t.userId?.username}</td>
                                <td>{t.costPrice ? `${t.costPrice.toLocaleString()} ‡∏ø` : "-"}</td>
                                <td>{t.salePrice ? `${t.salePrice.toLocaleString()} ‡∏ø` : "-"}</td>
                                <td>{t.notes || "-"}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            )}
        </div>
    );
};

export default StockTransaction;
