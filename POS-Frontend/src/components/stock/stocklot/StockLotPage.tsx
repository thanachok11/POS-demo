import React, { useEffect, useState } from "react";
import {
  getStockLots,
  getStockLotsByBarcode,
  updateExpiryDate,
  deactivateStockLot,
} from "../../../api/stock/stockLotApi";
import "../../../styles/stock/StockLotPage.css";

const StockLotPage: React.FC = () => {
  const [barcode, setBarcode] = useState("");
  const [lots, setLots] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const token = localStorage.getItem("token") || "";

  const [showExpiryModal, setShowExpiryModal] = useState<any>(null);
  const [showQCModal, setShowQCModal] = useState<any>(null);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πá‡∏≠‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤
  useEffect(() => {
    fetchAllLots();
  }, []);

  const fetchAllLots = async () => {
    setLoading(true);
    const result = await getStockLots(token);
    setLoading(false);
    if (result.success) setLots(result.data);
  };

  const handleSearch = async () => {
    if (!barcode.trim()) return fetchAllLots();
    setLoading(true);
    const result = await getStockLotsByBarcode(barcode, token);
    setLoading(false);
    if (result.success) setLots(result.lots);
  };

  const handleUpdateExpiry = async (lotId: string, expiryDate: string) => {
    const res = await updateExpiryDate(lotId, expiryDate, token);
    if (res.success) {
      alert("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      fetchAllLots();
    }
  };

  const handleDeactivate = async (lotId: string) => {
    if (!window.confirm("‚ùó ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏•‡πá‡∏≠‡∏ï‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) return;
    const res = await deactivateStockLot(lotId, token);
    if (res.success) {
      alert("üóÉÔ∏è ‡∏õ‡∏¥‡∏î‡∏•‡πá‡∏≠‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      fetchAllLots();
    }
  };

  return (
    <div className="stocklot-page">
      <h2>üì¶ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>

      {/* üîç Search */}
      <div className="search-bar">
        <input
          type="text"
          placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏¥‡∏á Barcode..."
          value={barcode}
          onChange={(e) => setBarcode(e.target.value)}
          onKeyDown={(e) => e.key === "Enter" && handleSearch()}
        />
        <button onClick={handleSearch} disabled={loading}>
          {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..." : "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"}
        </button>
      </div>

      {/* üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏•‡πá‡∏≠‡∏ï */}
      <table className="lot-table">
        <thead>
          <tr>
            <th>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
            <th>Batch</th>
            <th>‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏</th>
            <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
            <th>Supplier</th>
            <th>‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
            <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
            <th>QC</th>
            <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
          </tr>
        </thead>
        <tbody>
          {lots.map((lot) => (
            <tr key={lot._id}>
              <td>{lot.productId?.name || "-"}</td>
              <td>{lot.batchNumber}</td>
              <td>
                {lot.expiryDate
                  ? new Date(lot.expiryDate).toLocaleDateString("th-TH")
                  : "-"}
              </td>
              <td>{lot.quantity}</td>
              <td>{lot.supplierName || lot.supplierId?.name || "-"}</td>
              <td>{lot.location?.name || "-"}</td>
              <td>{lot.status}</td>
              <td>{lot.qcStatus}</td>
              <td>
                <button
                  className="btn-edit"
                  onClick={() => setShowExpiryModal(lot)}
                >
                  üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
                </button>
                <button
                  className="btn-delete"
                  onClick={() => handleDeactivate(lot._id)}
                >
                  üö´ ‡∏õ‡∏¥‡∏î‡∏•‡πá‡∏≠‡∏ï
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* üóìÔ∏è Modal ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ */}
      {showExpiryModal && (
        <div className="modal-overlay">
          <div className="modal">
            <h3>‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏</h3>
            <input
              type="date"
              defaultValue={
                showExpiryModal.expiryDate
                  ? new Date(showExpiryModal.expiryDate)
                    .toISOString()
                    .split("T")[0]
                  : ""
              }
              onChange={(e) =>
                (showExpiryModal.expiryDate = e.target.value)
              }
            />
            <div className="modal-actions">
              <button
                onClick={() =>
                  handleUpdateExpiry(
                    showExpiryModal._id,
                    showExpiryModal.expiryDate
                  )
                }
              >
                ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
              </button>
              <button onClick={() => setShowExpiryModal(null)}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
            </div>
          </div>
        </div>
      )}

      {/* üß™ Modal QC */}
      {showQCModal && (
        <div className="modal-overlay">
          <div className="modal">
            <h3>‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ QC</h3>
            <select
              defaultValue={showQCModal.qcStatus}
              onChange={(e) =>
                (showQCModal.qcStatus = e.target.value)
              }
            >
              <option value="‡∏ú‡πà‡∏≤‡∏ô">‡∏ú‡πà‡∏≤‡∏ô</option>
              <option value="‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô">‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô</option>
              <option value="‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö">‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</option>
            </select>
            <textarea
              placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"
              defaultValue={showQCModal.notes}
              onChange={(e) => (showQCModal.notes = e.target.value)}
            />
          </div>
        </div>
      )}
    </div>
  );
};

export default StockLotPage;
