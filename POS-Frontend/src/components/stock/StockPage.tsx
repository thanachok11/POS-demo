import React, { useState, useEffect } from "react";
import { getStockData } from "../../api/stock/stock.ts";
import { getProducts } from "../../api/product/productApi.ts";
import { Link, useNavigate } from "react-router-dom"; // ‡πÄ‡∏û‡∏¥‡πà‡∏° useNavigate
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { jwtDecode } from "jwt-decode";
import { getWarehouses } from "../../api/product/warehousesApi.ts";
import {getCategories} from "../../api/product/categoryApi.ts";
import { faUserTie, faSearch, faEnvelope, faBriefcase, faPlus } from "@fortawesome/free-solid-svg-icons";
import "../../styles/stock/StockPage.css";
interface StockItem {
  barcode: string;
  name: string;
  imageUrl: string;
  quantity: number;
  updatedAt: string;
  location: string;
  status: string;
  supplier: string;
  supplierCompany: string;
  category: string;
}

const StockPage: React.FC = () => {
  const [stockData, setStockData] = useState<StockItem[]>([]);
  const [products, setProducts] = useState<any[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState<string>("");
  const [user, setUser] = useState<{ userId: string; username: string; role: string; email: string } | null>(null);
  const [Warehouses, setGetWarehouses] = useState<any | null>(null);
  const [categories, setCategories] = useState<any[]>([]);

  const navigate = useNavigate(); // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  useEffect(() => {
    const token = localStorage.getItem("token");
    if (token) {
      try {
        const decoded: any = jwtDecode(token);
        setUser({
          userId: decoded.userId,
          role: decoded.role, // ‚úÖ ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
          username: decoded.username,
          email: decoded.email,
          
        });

      } catch (error) {
        console.error("Invalid token:", error);
      }
    }
  }, []);

  useEffect(() => {
 
    const fetchData = async () => {
      const token = localStorage.getItem("token");
      if (!token) {
        setError("‚ùå No token found");
        setLoading(false);
        return;
      }

      try {
        const stock = await getStockData(token);
        setStockData(stock);
        console.log('stock data:',stock);
        const productData = await getProducts();
        if (productData.success && Array.isArray(productData.data)) {
          setProducts(productData.data);
          console.log(productData.data);
        } else {
          setError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤");
        }
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

    useEffect(() => {
      const fetchWarehouses = async () => {
        const token = localStorage.getItem("token");
        if (!token) {
          setError("‚ùå No token found for warehouse");
          return;
        }
  
        try {
          const warehouseList = await getWarehouses();
          console.log("üì¶ Warehouse Data:", warehouseList);
          setGetWarehouses(warehouseList); // ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô array
        } catch (error) {
          setError("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ");
          console.error("Warehouse Fetch Error:", error);
        }
      };
  
      fetchWarehouses();
    }, []);
    
  useEffect(() => {
    const fetchCategories = async () => {
      const token = localStorage.getItem("token");
      if (!token) {
        setError("‚ùå No token found for categories");
        return;
      }

      try {
        const categoryList = await getCategories(token);
        console.log("üì¶ Category Data (API response):", categoryList);
        setCategories(categoryList.data); // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å
      } catch (error) {
        setError("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ");
        console.error("Category Fetch Error:", error);
      }
    };

    fetchCategories();
  }, []);
    
    
    

  const getProductDetails = (barcode: string) => {
    return products.find((product) => product.barcode === barcode);
  };
  const getLocationName = (locationId: string) => {
    const location = Warehouses.find(w => w._id === locationId);
    return location ? location.location : "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö";
  };

  const getCategoryNameById = (categoryId: string | undefined) => {
    if (!categoryId || !Array.isArray(categories)) return "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà";

    const category = categories.find(cat => cat._id === categoryId);
    return category ? category.name : "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà";
  };
  


  const formatThaiDateTime = (dateString: string) =>
    new Date(dateString).toLocaleString("th-TH", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      hour12: false,
      timeZone: "Asia/Bangkok"
    }).replace("‡∏ô.", "").trim() + " ‡∏ô.";


  const getStatusIcon = (status: string) => {
    switch (status) {
      case "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢":
        return "‚úÖ";
      case "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î":
        return "‚ùå";
      default:
        return "‚ö†Ô∏è";
    }
  };

  const filteredStock = stockData.filter((item) => {
    const product = getProductDetails(item.barcode);
    const searchText = searchQuery.toLowerCase();

    return (
      product?.name?.toLowerCase().includes(searchText) ||
      product?.category?.toLowerCase().includes(searchText) ||
      item.supplier?.toLowerCase().includes(searchText) ||
      item.barcode.includes(searchText)
    );
  });

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß
  const handleRowClick = (barcode: string) => {
    navigate(`/products/barcode/${barcode}`); // ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  };

  return (
    <div className="display">
    <div className="stock-container">
      <h2 className="stock-header">üì¶ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>

      {loading && <p className="loadingStock">‚è≥ Loading...</p>}
      {error && <p className="error-message">{error}</p>}

      <div className="search-container">
        <input
          type="text"
          placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤..."
          className="search-input"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
      </div>
      
      {user?.role !== "employee" && (
      
      <Link to="/add-product">
        <button className="add-product-button">
          <FontAwesomeIcon icon={faPlus} /> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
          </button>
      </Link>
      )}
      {!loading && !error && (
        <table className="stock-table">
          <thead>
            <tr className="stock-header-row">
              <th className="stock-header-cell">‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
              <th className="stock-header-cell">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
              <th className="stock-header-cell">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</th>
              <th className="stock-header-cell">‡∏£‡∏≤‡∏Ñ‡∏≤</th>
              <th className="stock-header-cell">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
              <th className="stock-header-cell">‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
              <th className="stock-header-cell">‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå</th>
              <th className="stock-header-cell">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
              <th className="stock-header-cell">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</th>
              <th className="stock-header-cell">‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</th>
            </tr>
          </thead>
          <tbody>
            {filteredStock.length > 0 ? (
              filteredStock.map((item, index) => {
                const product = getProductDetails(item.barcode);
                return (
                  <tr
                    key={item.barcode}
                    className="clickable-row"
                    onClick={() => handleRowClick(item.barcode)} // ‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                  >
                    <td className="stock-cell">{index + 1}</td>
                    <td className="stock-cell">{product ? product.name : "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"}</td>
                    <td className="stock-cell">
                      {product && product.imageUrl ? (
                        <img src={product.imageUrl} className="product-image" />
                      ) : (
                        "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ"
                      )}
                    </td>
                    <td className="stock-cell">{product?.price} ‡∏ö‡∏≤‡∏ó</td>
                    <td className="stock-cell">{item.quantity}</td>
                    <td className="stock-cell">{getLocationName(item.location)}</td>
                    <td className="stock-cell">{item.supplier}</td>
                    <td className="stock-cell status-cell">
                      {getStatusIcon(item.status)} {item.status}
                    </td>
                    <td className="stock-cell">{getCategoryNameById(product.category)}</td>
                    <td className="stock-cell">{formatThaiDateTime(item.updatedAt)}</td>
                  </tr>
                );
              })
            ) : (
              <tr>
                <td colSpan={10} className="no-data">üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</td>
              </tr>
            )}
          </tbody>
        </table>
      )}
    </div>
    </div>
  );
};

export default StockPage;
