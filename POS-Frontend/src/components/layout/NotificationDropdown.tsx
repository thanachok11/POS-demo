// src/components/page/NotificationDropdown.tsx
import React, { useRef, useEffect, useState } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faBell } from "@fortawesome/free-solid-svg-icons";
import { useNavigate } from "react-router-dom";
import {
    connectSocket,
    onSocketEvent,
    offSocketEvent,
    disconnectSocket,
} from "../../api/websocket/socketService";
import { getStockData } from "../../api/stock/stock";
import "../../styles/page/Notification.css";

interface StockItem {
    _id: string;            // id ‡∏Ç‡∏≠‡∏á stock
    productId?: string;     // ‚úÖ id ‡∏Ç‡∏≠‡∏á product ‡∏à‡∏£‡∏¥‡∏á
    barcode: string;
    name: string;
    imageUrl: string;
    totalQuantity: number;
    updatedAt: string;
    location: string;
    locationId?: string;
    status: string;
    supplierId?: string;
    supplierName?: string;
    category: string;
    threshold?: number;
    costPrice?: number;
    salePrice?: number;
}



interface NotificationDropdownProps {
    notificationOpen: boolean;
    setNotificationOpen: (value: boolean) => void;
    hasSeenLowStock: boolean;
    showLowStockList: boolean;
    setShowLowStockList: (value: boolean | ((prev: boolean) => boolean)) => void;
}

const NotificationDropdown: React.FC<NotificationDropdownProps> = ({
    notificationOpen,
    setNotificationOpen,
    hasSeenLowStock,
    showLowStockList,
    setShowLowStockList,
}) => {
    const notificationRef = useRef<HTMLDivElement>(null);
    const [lowStockItems, setLowStockItems] = useState<StockItem[]>([]);
    const [notificationCount, setNotificationCount] = useState(0);
    const processedRef = useRef<Set<string>>(new Set());
    const navigate = useNavigate();

    const normalizeStockItem = (raw: any): StockItem => ({
        _id: raw._id, // id ‡∏Ç‡∏≠‡∏á stock
        productId: raw.productId?._id || raw.productId || "", // ‚úÖ id ‡∏Ç‡∏≠‡∏á product ‡∏à‡∏£‡∏¥‡∏á
        barcode: raw.barcode ?? raw.productId?.barcode ?? "",
        name: raw.name ?? raw.productId?.name ?? "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
        imageUrl: raw.imageUrl ?? raw.productId?.imageUrl ?? "",
        totalQuantity: Number(raw.totalQuantity ?? 0),
        updatedAt: raw.updatedAt ?? new Date().toISOString(),
        location:
            typeof raw.location === "object"
                ? raw.location?.name ?? raw.location?._id ?? ""
                : raw.location ?? "",
        locationId:
            typeof raw.location === "object"
                ? raw.location?._id ?? ""
                : raw.location ?? "",
        status: raw.status ?? "",
        supplierId: raw.supplierId?._id || raw.supplierId || "",
        supplierName:
            raw.supplierId?.companyName ??
            raw.supplierName ??
            raw.supplier ??
            "",
        category:
            typeof raw.category === "string"
                ? raw.category
                : raw.productId?.category?.name ?? "",
        threshold:
            raw.threshold !== undefined && raw.threshold !== null
                ? Number(raw.threshold)
                : 5,
        costPrice: Number(raw.costPrice ?? raw.productId?.costPrice ?? 0),
        salePrice: Number(raw.salePrice ?? raw.productId?.salePrice ?? 0),
    });


    const isLow = (item: StockItem) =>
        item.totalQuantity <= (item.threshold ?? 5);

    // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î stock ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    const fetchStock = async () => {
        try {
            const token = localStorage.getItem("token");
            if (!token) return;

            const stock = await getStockData(token);
            const normalized: StockItem[] = (stock || []).map(normalizeStockItem);
            const lowList = normalized.filter(isLow);

            setLowStockItems(lowList);
            setNotificationCount(lowList.length); // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        } catch (err) {
            console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î stock ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", err);
        }
    };

    // ‚úÖ Socket realtime update
    useEffect(() => {
        const socket = connectSocket();
        let ready = false;

        const handleStockUpdate = (raw: any) => {
            const updated = normalizeStockItem(raw);
            const id = updated._id;
            const nowLow = isLow(updated);

            if (!ready) return;
            if (processedRef.current.has(id)) return;

            processedRef.current.add(id);
            setTimeout(() => processedRef.current.delete(id), 300);

            setLowStockItems((prev) => {
                const exists = prev.some((i) => i._id === id);

                // üÜï ‡∏ñ‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ list
                if (nowLow && !exists) {
                    console.log("üîî ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏´‡∏°‡πà:", updated.name);
                    setNotificationCount((c) => c + 1);
                    return [...prev, updated];
                }

                // üîÅ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢‡∏≠‡∏¢‡∏π‡πà ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                if (nowLow && exists) {
                    return prev.map((i) => (i._id === id ? updated : i));
                }

                // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‚Üí ‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å list (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏•‡∏î count ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô prev)
                if (!nowLow && exists) {
                    console.log("‚úÖ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥:", updated.name);

                    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô double decrement: ‡∏•‡∏î count ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡πÉ‡∏ô list ‡∏à‡∏£‡∏¥‡∏á
                    setNotificationCount((c) => {
                        const stillHasItem = prev.some((x) => x._id === id);
                        return stillHasItem ? Math.max(c - 1, 0) : c;
                    });

                    return prev.filter((i) => i._id !== id);
                }

                return prev;
            });
        };

        onSocketEvent("stockUpdated", handleStockUpdate);

        (async () => {
            await fetchStock();
            ready = true;
        })();

        return () => {
            offSocketEvent("stockUpdated", handleStockUpdate);
            disconnectSocket();
        };
    }, []);

    // ‡∏õ‡∏¥‡∏î dropdown ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            const target = event.target as HTMLElement;
            if (
                notificationRef.current &&
                !notificationRef.current.contains(target)
            ) {
                setNotificationOpen(false);
            }
        };
        document.addEventListener("mousedown", handleClickOutside);
        return () =>
            document.removeEventListener("mousedown", handleClickOutside);
    }, [setNotificationOpen]);

    // ‚úÖ ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á PO ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢
    const handleItemClick = (item: StockItem) => {
        setNotificationOpen(false);
        navigate("/create-purchase-order", {
            state: {
                fromNotification: true,
                product: item,
            },
        });
    };

    return (
        <div className="notification-dropdown" ref={notificationRef}>
            {/* üîî ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô */}
            <div
                className="notification-wrapper"
                onClick={() => setNotificationOpen(!notificationOpen)}
            >
                <FontAwesomeIcon icon={faBell} className="icon notification-icon" />
                {notificationCount > 0 && (
                    <span className="notification-length">{notificationCount}</span>
                )}
            </div>

            {/* üìú ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô */}
            {notificationOpen && (
                <div
                    className="notification-menu"
                    onClick={(e) => e.stopPropagation()}
                >
                    {lowStockItems.length > 0 ? (
                        <>
                            <div
                                className="notification-item low-stock-header clickable"
                                onClick={() => setShowLowStockList((prev) => !prev)}
                            >
                                üì¶ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢
                                <span className="low-stock-count">
                                    ({lowStockItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
                                </span>
                            </div>

                            {showLowStockList &&
                                lowStockItems.map((item) => (
                                    <div
                                        key={item._id}
                                        className="notification-item hoverable"
                                        onClick={() => handleItemClick(item)}
                                    >
                                        ‚Ä¢ {item.name} ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {item.totalQuantity} ‡∏ä‡∏¥‡πâ‡∏ô
                                    </div>
                                ))}
                        </>
                    ) : (
                        <p className="notification-item">‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢</p>
                    )}
                </div>
            )}
        </div>
    );
};

export default NotificationDropdown;