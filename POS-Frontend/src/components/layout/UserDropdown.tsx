import React, { useRef, useEffect } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faCaretDown, faCog, faSignOutAlt } from "@fortawesome/free-solid-svg-icons";
import { logoutUser } from "../../api/auth/auth";
interface User {
    name: string;
    username: string;
    email: string;
    role: string;
    profileImg: string;
    nameStore: string;
}

interface UserDropdownProps {
    user: User;
    userdropdown: boolean;
    setUserDropdown: (value: boolean) => void;
    onSettings: () => void;
    onLogout: () => void;
}

const UserDropdown: React.FC<UserDropdownProps> = ({
    user,
    userdropdown,
    setUserDropdown,
    onSettings,
    onLogout,
}) => {
    const userRef = useRef<HTMLDivElement>(null);

    const handleLogout = async () => {
        try {
            await logoutUser();   // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå session/token ‡∏ó‡∏µ‡πà backend
            onLogout();           // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå state ‡∏ù‡∏±‡πà‡∏á frontend
            window.location.reload(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤
        } catch (error) {
            console.error("Logout failed:", error);
        }
    };
    // ‡∏õ‡∏¥‡∏î dropdown ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            const target = event.target as HTMLElement;
            if (userRef.current && !userRef.current.contains(target)) {
                setUserDropdown(false);
            }
        };

        document.addEventListener("mousedown", handleClickOutside);
        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, [setUserDropdown]);

    return (
        <div
            className="user-dropdown"
            ref={userRef}
            onClick={() => setUserDropdown(!userdropdown)}
        >
            <div className="user-info">
                <img src={user.profileImg} alt="User" className="avatar" />
                <div className="user-details">
                    <span className="username">{user?.username || user?.name}</span>
                    <span className="status-online">üü¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå</span>
                </div>
                <FontAwesomeIcon icon={faCaretDown} className="icon caret-icon" />
            </div>

            {userdropdown && (
                <div className="dropdown-menu" onClick={(e) => e.stopPropagation()}>
                    <p className="user-role">üë§ Role: {user.role}</p>

                    {/* ‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ */}
                    <button onClick={onSettings} className="settings-button">
                        <FontAwesomeIcon icon={faCog} className="icon settings-icon" /> ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                    </button>

                    {/* ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö */}
                    <button onClick={handleLogout} className="logout-button">
                        <FontAwesomeIcon icon={faSignOutAlt} className="icon logout-icon" /> ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
                    </button>
                </div>
            )}
        </div>
    );
};

export default UserDropdown;
