import React, { useState, useEffect } from "react";

import "../../styles/payment/Checkout.css"; // CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Modal
import { useNavigate } from "react-router-dom";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faTimes, faCartShopping, faMoneyBill, faQrcode, faCreditCard, faCheckCircle

} from "@fortawesome/free-solid-svg-icons";

import { QRCodeSVG } from 'qrcode.react'; // üëà ‡πÅ‡∏Å‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
import generatePayload from 'promptpay-qr';

interface CheckoutProps {
  cart: { barcode: string; name: string; price: number; quantity: number }[];
  totalPrice: number;
  onClose: () => void;
  onConfirmPayment: (method: string, amountReceived?: number) => void; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° amountReceived
  checkout: (
    amountReceived: number,
    selectedPaymentMethod: "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î" | "‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô" | "‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï" | "QR Code"
  ) => Promise<void>
}


const Checkout: React.FC<CheckoutProps> = ({ cart, totalPrice, onClose, onConfirmPayment, checkout }) => {
  const [showNumpad, setShowNumpad] = useState(false);
  const [cashInput, setCashInput] = useState("");
  const [change, setChange] = useState<number | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [popupVisible, setPopupVisible] = useState(false);
  const [showCredit, setShowCredit] = useState(false); // ‡πÄ‡∏õ‡∏¥‡∏î Modal ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
  const [selectedCard, setSelectedCard] = useState<string | null>(null); // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ï‡∏£
  const navigate = useNavigate();

  const [totalPriceQr, setTotalPrice] = useState(0);

  const [phoneNumber] = useState("0633133099");
  const [showQR, setShowQR] = useState(false);
  const [qrCode, setqrCode] = useState("");

  const handleCashPayment = () => {
    const cashAmount = parseFloat(cashInput);
    if (isNaN(cashAmount)) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      setChange(null);
    } else {
      setChange(cashAmount - totalPrice); // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ change ‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ
      setError(null); // ‚ùå ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á error ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÉ‡∏ä‡πâ JSX ‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏ó‡∏ô
    }
  };


  const confirmCashPayment = async () => {
    const cashAmount = parseFloat(cashInput);
    if (change !== null && change >= 0) {
      console.log("üì¶ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å checkout ‡πÅ‡∏•‡πâ‡∏ß:", cashAmount); // ‚úÖ Log ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

      await checkout(cashAmount, "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î"); // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢
      setPopupVisible(true);
    }
  };



  const confirmQRPayment = async () => {
    await checkout(totalPrice, "QR Code"); // ‚úÖ ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö
    setPopupVisible(true);
  };

  const confirmCreditPayment = async () => {
    if (selectedCard) {
      await checkout(totalPrice, "‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï"); // ‚úÖ ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö
      setPopupVisible(true);
    }
  };




    useEffect(() => {
      const total = cart.reduce((acc, item) => acc + item.price * item.quantity, 0);
      setTotalPrice(total);
    }, [cart]);

    useEffect(() => {
      // Generate PromptPay QR code when totalPrice changes
      const qr = generatePayload(phoneNumber, { amount: totalPrice });
      setqrCode(qr);
    }, [totalPrice, phoneNumber]);
  
  const handleClose = () => {
    navigate("/reports/receipts");
    onClose();
  };
  return (
    <div className="display">
    <div className="checkout-modal">
      <div className="checkout-content">

        {/* ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
        <div className="checkout-left">
          <div className="checkout-items">
            {cart.map((item) => (
              <div key={item.barcode} className="checkout-item">
                <span className="checkout-item-name">{item.name}</span>
                <span className="checkout-item-price">‡∏£‡∏≤‡∏Ñ‡∏≤ {item.price.toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
                <span className="checkout-item-quantity">x {item.quantity} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
              </div>
            ))}
          </div>

          <div className="checkout-total">
            <span className="checkout-total-label">‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:</span>
            <span className="checkout-total-price">{totalPrice.toLocaleString()} ‡∏ø</span>
          </div>

          {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ */}
          {change !== null && change >= 0 && (
            <p className="checkout-change">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</p>
          )}

          {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠ */}
          {change !== null && change < 0 && (
            <p className="checkout-error">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠</p>
          )}

        </div>

        {/* ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤: ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô */}
        <div className="checkout-right">
          <button onClick={onClose} className="checkout-close-btn">
            <FontAwesomeIcon icon={faTimes} />
          </button>

          <div className="checkout-payment-buttons">
            <button className="checkout-cash-btn" onClick={() => { setShowNumpad(true); setShowQR(false); setShowCredit(false); }}>
              <FontAwesomeIcon icon={faMoneyBill} /> ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î
            </button>
            <button className="checkout-qr-btn" onClick={() => { setShowQR(true); setShowNumpad(false); setShowCredit(false); }}>
              <FontAwesomeIcon icon={faQrcode} /> QR Code
            </button>
            <button className="checkout-credit-btn" onClick={() => { setShowCredit(true); setShowNumpad(false); setShowQR(false); }}>
              <FontAwesomeIcon icon={faCreditCard} /> ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
            </button>
          </div>

          {!showNumpad ? !showQR && !showCredit && (
            <div>
              <h2 className="checkout-title">
                <FontAwesomeIcon icon={faCartShopping} /> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
              </h2>
              {error && <div className="checkout-error">{error}</div>}
            </div>
          ) : (
              <div className="checkout-numpad">
                <h3 className="checkout-numpad-title">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</h3>
                <input
                  type="text"
                  className="checkout-numpad-input"
                  value={
                    Number(cashInput)
                      ? Number(cashInput).toLocaleString(): ""
                  }
                  readOnly
                />

                <div className="numpad-buttons">
                  {[1, 2, 3, 4, 5, 6, 7, 8, 9, 0].map((num) => (
                    <button
                      key={num}
                      className="numpad-btn"
                      onClick={() => {
                        setCashInput(cashInput + num);
                        setError(null); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå error ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                      }}
                    >
                      {num}
                    </button>
                  ))}

                  {/* ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß (Backspace) */}
                  <button
                    className="numpad-btn backspace-btn"
                    onClick={() => {
                      setCashInput(cashInput.slice(0, -1));
                      setChange(null);
                      setError(null);
                    }}
                  >
                    ‚¨Ö
                  </button>

                  {/* ‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */}
                  <button
                    className="numpad-btn clear-btn"
                    onClick={() => {
                      setCashInput("");
                      setChange(null);
                      setError(null);
                    }}
                  >
                    AC
                  </button>

                  {/* ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô */}
                  <button className="numpad-btn confirm-btn" onClick={handleCashPayment}>
                    ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                  </button>
                </div>

                <button
                  onClick={confirmCashPayment}
                  className="checkout-btn checkout-confirm-btn"
                  disabled={change === null || change < 0}
                >
                  ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                </button>
              </div>

          )}

          {/* QR Code Modal */}
          {showQR && (
            <div className="qr-code-image">
              <h3 className="qr-title">‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h3>
              {qrCode && <QRCodeSVG value={qrCode} size={256} />}
              <button onClick={confirmQRPayment} className="qr-confirm-btn">
                ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
              </button>
            </div>
          )}
 

          {/* Credit Card Modal */}
          {showCredit && (
            <div className="credit-modal">
              <h3 className="credit-title">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï</h3>
              <div className="credit-options">
                {["Visa", "Mastercard", "JCB"].map((card) => (
                  <button
                    key={card}
                    className={`credit-option ${selectedCard === card ? "selected" : ""}`}
                    onClick={() => setSelectedCard(card)}
                  >
                    {card}
                  </button>
                ))}
              </div>
              <button onClick={confirmCreditPayment} className="credit-confirm-btn" disabled={!selectedCard}>
                ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
              </button>
            </div>
          )}
        </div>

      </div>
      {popupVisible && (
        <div className="payment-popup">
          <div className="payment-popup-content">
            <FontAwesomeIcon icon={faCheckCircle} className="payment-popup-icon" />
            <h3 className="payment-popup-title">‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h3>
            <p className="payment-popup-change">‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {change?.toLocaleString()} ‡∏ø</p>

            <button
              onClick={() => {
                setPopupVisible(false);  // ‚úÖ ‡∏ã‡πà‡∏≠‡∏ô popup
                onClose();               // ‚úÖ ‡∏õ‡∏¥‡∏î Modal ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å popup ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
              }}
              className="payment-popup-close-btn"
            >
              ‡∏õ‡∏¥‡∏î
            </button>
          </div>
        </div>
      )}

    </div>
    </div>
  );
}


export default Checkout;
