import { useEffect, useState } from "react";
import { getAllPayments } from "../../api/payment/paymentApi";
import "../../styles/payment/PaymentPage.css";
import React from "react";

interface Payment {
  _id: string;
  saleId: string;
  employeeName: string;
  paymentMethod: string;
  amount: number;
  status: string;
  createdAt: string; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
}

export default function PaymentPage() {
  const [payments, setPayments] = useState<Payment[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const getPayments = async () => {
      try {
        const response = await getAllPayments();
        console.log(response);
        if (response.success) {
          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î -> ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î
          const sortedPayments = response.data.sort(
            (a: Payment, b: Payment) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
          );
          setPayments(sortedPayments);
        } else {
          setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
        }
      } catch (err) {
        setError(err instanceof Error ? err.message : "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
      } finally {
        setLoading(false);
      }
    };

    getPayments();
  }, []);

  const getStatusEmoji = (status: string) => {
    switch (status) {
      case "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à":
        return "‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à";
      case "‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß":
        return "‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß";
      default:
        return "‚è≥ ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£";
    }
  };

  const getPaymentMethodEmoji = (method: string) => {
    switch (method) {
      case "‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï":
        return "‡∏ä‡∏≥‡∏£‡∏∞‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï";
      case "QR Code":
        return "‡∏™‡πÅ‡∏Å‡∏ô QR Code";
      case "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î":
        return "‡∏ä‡∏≥‡∏£‡∏∞‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î";
      case "‡πÇ‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£":
        return "‡πÇ‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£";
      case "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå":
        return "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå";
      default:
        return "‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ";
    }
  };


  const formatThaiDateTime = (dateString: string) =>
    new Date(dateString).toLocaleString("th-TH", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      hour12: false,
      timeZone: "Asia/Bangkok"
    }).replace("‡∏ô.", "").trim() + " ‡∏ô.";

  return (
    <div className="display">
    <div className="payment-container">
      <h1 className="payment-title">üí∞ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h1>

      {loading && <p className="payment-loading">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>}
      {error && <p className="payment-error">{error}</p>}

      {!loading && !error && (
        <table className="payment-table">
          <thead>
            <tr>
              <th>‡∏•‡∏≥‡∏î‡∏±‡∏ö</th> {/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏•‡∏≥‡∏î‡∏±‡∏ö */}
              <th>‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢</th>
              <th>‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</th>
              <th>‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</th>
              <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</th>
              <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
              <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
            </tr>
          </thead>
          <tbody>
            {payments.length > 0 ? (
              payments.map((payment, index) => (
                <tr key={payment._id}>
                  <td>{index + 1}</td> {/* ‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î */}
                  <td>{payment.saleId}</td>
                  <td>{payment.employeeName}</td>
                  <td>{getPaymentMethodEmoji(payment.paymentMethod)}</td>
                  <td>{payment.amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó</td>
                  <td>{getStatusEmoji(payment.status)}</td>
                  <td>{formatThaiDateTime(payment.createdAt)}</td> {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà */}
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan={7} className="payment-no-data">
                  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                </td>
              </tr>
            )}
          </tbody>
        </table>
      )}
    </div>
    </div>
  );
}
