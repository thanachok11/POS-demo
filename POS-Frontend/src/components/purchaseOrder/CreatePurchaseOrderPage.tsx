import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
    faCheckCircle,
    faExclamationCircle,
    faTrashAlt,
    faPlus,
} from "@fortawesome/free-solid-svg-icons";

import { getSupplierData, getProductsBySupplier } from "../../api/suppliers/supplierApi";
import { createPurchaseOrder } from "../../api/purchaseOrder/purchaseOrderApi";
import { getWarehouseByProduct } from "../../api/purchaseOrder/purchaseOrderApi";

import "../../styles/stock/CreateOrderPage.css";

const CreatePurchaseOrderPage: React.FC = () => {
    const navigate = useNavigate();

    // ‚úÖ States
    const [suppliers, setSuppliers] = useState<any[]>([]);
    const [products, setProducts] = useState<any[]>([]);
    const [items, setItems] = useState<any[]>([]);

    const [supplierId, setSupplierId] = useState("");
    const [supplierCompany, setSupplierCompany] = useState("");

    const [productId, setProductId] = useState("");
    const [quantity, setQuantity] = useState<number>(1);
    const [costPrice, setCostPrice] = useState<number>(0);
    const [salePrice, setSalePrice] = useState<number>(0);

    const [loading, setLoading] = useState(true);
    const [message, setMessage] = useState("");
    const [showSuccessPopup, setShowSuccessPopup] = useState(false);
    const [showErrorPopup, setShowErrorPopup] = useState(false);

    const [warehouseId, setWarehouseId] = useState("");
    const [warehouseName, setWarehouseName] = useState(""); // ‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏±‡∏á
    const [warehouseCode, setWarehouseCode] = useState(""); // ‚úÖ ‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏•‡∏±‡∏á

    /* ======================================================
       üîπ ‡πÇ‡∏´‡∏•‡∏î Supplier ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    ====================================================== */
    useEffect(() => {
        const fetchSuppliers = async () => {
            try {
                const token = localStorage.getItem("token") || "";
                const supRes = await getSupplierData(token);
                setSuppliers(supRes.data || supRes);
            } catch (err) {
                console.error("Load supplier error:", err);
                setMessage("‚ùå ‡πÇ‡∏´‡∏•‡∏î Supplier ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
                setShowErrorPopup(true);
            } finally {
                setLoading(false);
            }
        };
        fetchSuppliers();
    }, []);

    /* ======================================================
       üîπ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Supplier
    ====================================================== */
    const fetchProductsBySupplierHandler = async (id: string) => {
        try {
            const token = localStorage.getItem("token") || "";
            const res = await getProductsBySupplier(id, token);

            const normalized = (res.data || []).map((item: any) => ({
                _id: item.product._id,
                name: item.product.name,
                barcode: item.product.barcode,
                description: item.product.description,
                costPrice: item.stock?.costPrice || 0,
                salePrice: item.stock?.salePrice || item.product.price || 0,
                totalQuantity: item.stock?.totalQuantity || 0,
                stockId: item.stock?._id || null,
            }));

            setProducts(normalized);
        } catch (err) {
            console.error("Load products error:", err);
            setProducts([]);
            setMessage("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á Supplier ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
            setShowErrorPopup(true);
        }
    };

    /* ======================================================
       üîπ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á Product ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    ====================================================== */
    const fetchWarehouseByProduct = async (productId: string) => {
        try {
            const token = localStorage.getItem("token") || "";
            const data = await getWarehouseByProduct(productId, token);

            if (data.success && data.data?.location?._id) {
                setWarehouseId(data.data.location._id);
                setWarehouseName(data.data.location.name || "");
                setWarehouseCode(data.data.location.code || "");
                console.log("üì¶ warehouse ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ:", data.data.location.name);
            } else {
                setWarehouseId("");
                setWarehouseName("");
                setWarehouseCode("");
                console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ");
            }
        } catch (err) {
            console.error("‚ùå Fetch warehouse error:", err);
            setWarehouseId("");
            setWarehouseName("");
            setWarehouseCode("");
        }
    };

    /* ======================================================
       üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ PO
    ====================================================== */
    const handleAddItem = () => {
        if (!productId || quantity <= 0 || costPrice <= 0) {
            setMessage("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö");
            setShowErrorPopup(true);
            return;
        }

        const selectedProduct = products.find((p) => p._id === productId);
        if (!selectedProduct) return;

        // üîÑ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ã‡πâ‡∏≥
        const exists = items.find((i) => i.productId === productId);
        if (exists) {
            setMessage("‚ö†Ô∏è ‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß");
            setShowErrorPopup(true);
            return;
        }

        const newItem = {
            productId,
            productName: selectedProduct.name,
            barcode: selectedProduct.barcode,
            quantity,
            costPrice,
            salePrice: salePrice || selectedProduct.salePrice,
            total: quantity * costPrice,
        };

        setItems((prev) => [...prev, newItem]);
        setProductId("");
        setQuantity(1);
        setCostPrice(0);
        setSalePrice(0);
    };

    /* ======================================================
       üîπ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    ====================================================== */
    const handleRemoveItem = (id: string) => {
        setItems(items.filter((item) => item.productId !== id));
    };

    /* ======================================================
       üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (POST)
    ====================================================== */
    const handleSubmit = async () => {
        if (!supplierId || items.length === 0) {
            setMessage("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Supplier ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");
            setShowErrorPopup(true);
            return;
        }

        try {
            const token = localStorage.getItem("token") || "";
            const purchaseOrderNumber = `PO-${new Date().getFullYear()}-${Date.now()}`;

            const payload = {
                purchaseOrderNumber,
                supplierId,
                supplierCompany,
                location: warehouseId, // ‚úÖ ‡∏î‡∏∂‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                items: items.map((i) => ({
                    productId: i.productId,
                    productName: i.productName,
                    barcode: i.barcode,
                    quantity: Number(i.quantity),
                    costPrice: Number(i.costPrice),
                    salePrice: Number(i.salePrice),
                })),
            };

            const res = await createPurchaseOrder(payload, token);

            if (res.success) {
                setMessage("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
                setShowSuccessPopup(true);
                setItems([]);
                setSupplierId("");
                setSupplierCompany("");
                setWarehouseId("");
            } else {
                throw new Error(res.message);
            }
        } catch (err: any) {
            console.error("Create PO error:", err);
            setMessage(err?.message || "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠");
            setShowErrorPopup(true);
        }
    };

    /* ======================================================
       üß± Render
    ====================================================== */
    if (loading) return <p>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>;

    return (
        <div className="create-order-container-suppliers">
            <h2 className="create-order-header-suppliers">üßæ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (Purchase Order)</h2>

            {/* Supplier Selector */}
            <div className="form-group-suppliers">
                <label>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Supplier:</label>
                <select
                    value={supplierId}
                    onChange={(e) => {
                        const id = e.target.value;
                        const selected = suppliers.find((s) => s._id === id);
                        setSupplierId(id);
                        setSupplierCompany(selected?.companyName || "");
                        setItems([]);
                        setProducts([]);
                        if (id) fetchProductsBySupplierHandler(id);
                    }}
                >
                    <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Supplier --</option>
                    {suppliers.map((s) => (
                        <option key={s._id} value={s._id}>
                            {s.companyName}
                        </option>
                    ))}
                </select>
            </div>

            {/* Products */}
            {supplierId ? (
                <>
                    <div className="form-group-suppliers">
                        <label>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</label>
                        <select
                            value={productId}
                            onChange={(e) => {
                                const id = e.target.value;
                                const selected = products.find((p) => p._id === id);
                                if (selected) {
                                    setProductId(selected._id);
                                    setCostPrice(selected.costPrice);
                                    setSalePrice(selected.salePrice);
                                    fetchWarehouseByProduct(selected._id); // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                                }
                            }}
                        >
                            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ --</option>
                            {products.length > 0 ? (
                                products.map((p) => (
                                    <option key={p._id} value={p._id}>
                                        {p.name} ({p.barcode}) - ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {p.totalQuantity} ‡∏ä‡∏¥‡πâ‡∏ô
                                    </option>
                                ))
                            ) : (
                                <option disabled>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</option>
                            )}
                        </select>
                    </div>

                    {productId && (
                        <>
                            <div className="form-inline-suppliers">
                                <div className="form-inline-item">
                                    <label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</label>
                                    <input
                                        type="number"
                                        value={quantity}
                                        min={1}
                                        onChange={(e) => setQuantity(Number(e.target.value))}
                                    />
                                </div>

                                <div className="form-inline-item">
                                    <label>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∏‡∏ô (‡∏ö‡∏≤‡∏ó):</label>
                                    <input
                                        type="number"
                                        value={costPrice}
                                        onChange={(e) => setCostPrice(Number(e.target.value))}
                                    />
                                </div>

                                <div className="form-inline-item">
                                    <button className="add-item-btn" onClick={handleAddItem}>
                                        <FontAwesomeIcon icon={faPlus} /> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                                    </button>
                                </div>
                            </div>

                            {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡∏∂‡∏á‡∏°‡∏≤ */}
                            {warehouseName && (
                                <div className="warehouse-display">
                                    <p style={{ marginTop: "10px", color: "#007bff" }}>
                                        üì¶ ‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: <strong>{warehouseName}</strong> ({warehouseCode})
                                    </p>
                                </div>
                            )}
                        </>
                    )}

                </>
            ) : (
                <p style={{ marginTop: "20px", fontStyle: "italic" }}>‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Supplier ‡∏Å‡πà‡∏≠‡∏ô</p>
            )}

            {/* Order Items List */}
            <div className="order-items-list">
                <h3>üì¶ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h3>
                {items.length === 0 ? (
                    <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
                ) : (
                    <ul>
                        {items.map((item, idx) => (
                            <li key={idx} className="order-item-row">
                                <span>
                                    {item.productName} ‚Äî {item.quantity} ‡∏ä‡∏¥‡πâ‡∏ô (‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô {item.costPrice}‡∏ø)
                                </span>
                                <button
                                    className="remove-item-btn"
                                    onClick={() => handleRemoveItem(item.productId)}
                                >
                                    <FontAwesomeIcon icon={faTrashAlt} />
                                </button>
                            </li>
                        ))}
                    </ul>
                )}
            </div>

            {/* Submit */}
            <button className="create-po-btn" onClick={handleSubmit}>
                ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
            </button>

            {/* Popup Success */}
            {showSuccessPopup && (
                <div className="order-popup success">
                    <div className="order-popup-content">
                        <FontAwesomeIcon icon={faCheckCircle} className="order-icon" />
                        <h3>{message}</h3>
                        <button
                            onClick={() => {
                                setShowSuccessPopup(false);
                                navigate("/purchase-orders");
                            }}
                            className="popup-close-btn"
                        >
                            ‡∏õ‡∏¥‡∏î
                        </button>
                    </div>
                </div>
            )}

            {/* Popup Error */}
            {showErrorPopup && (
                <div className="order-popup error">
                    <div className="order-popup-content">
                        <FontAwesomeIcon icon={faExclamationCircle} className="order-icon-error" />
                        <h3>{message}</h3>
                        <button
                            className="popup-close-btn"
                            onClick={() => setShowErrorPopup(false)}
                        >
                            ‡∏õ‡∏¥‡∏î
                        </button>
                    </div>
                </div>
            )}
        </div>
    );
};

export default CreatePurchaseOrderPage;
